{"ast":null,"code":"import _defineProperty from \"/home/raja/Documents/PM2/mern_blog/bloggy-master/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/raja/Documents/PM2/mern_blog/bloggy-master/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/raja/Documents/PM2/mern_blog/bloggy-master/client/src/containers/posts/UpdatePostPage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PostForm from \"../../components/posts/PostForm\";\nimport Validate from \"../../components/form/Validate\";\nimport { connect } from \"react-redux\";\nimport { getPostByID, updatePost } from \"../../actions/postActions\";\n\nconst UpdatePostPage = ({\n  errors,\n  updatePost,\n  loading,\n  currentPost,\n  getPostByID,\n  match,\n  history\n}) => {\n  const _useState = useState({\n    title: \"\",\n    body: \"\",\n    errors: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  useEffect(() => {\n    getPostByID(match.params.id);\n  }, [match, getPostByID]); // updating the local state of post with the received post data\n\n  useEffect(() => {\n    setPost(post => ({\n      title: currentPost.title,\n      body: currentPost.body,\n      errors: _objectSpread({}, post.errors)\n    }));\n  }, [currentPost]);\n  useEffect(() => {\n    setPost(post => {\n      return _objectSpread({}, post, {\n        errors\n      });\n    });\n  }, [errors]);\n\n  const handleChange = e => {\n    setPost(_objectSpread({}, post, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleBlur = e => {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n    const error = _objectSpread({}, post.errors, {}, Validate(name, value).errors);\n\n    setPost(_objectSpread({}, post, {\n      errors: _objectSpread({}, error)\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const title = post.title,\n          body = post.body;\n    updatePost(currentPost._id, {\n      title,\n      body\n    }, history);\n  }; // to ensure that the post is loaded otherwise we would make uncontrolled form access error\n\n\n  const isPostLoaded = () => {\n    return post.title || post.body || Object.keys(post.errors).length > 0;\n  };\n\n  return isPostLoaded() ? React.createElement(PostForm, {\n    loading: loading,\n    post: post,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  });\n};\n\nconst mapStateToProps = state => ({\n  currentPost: state.post.post,\n  loading: state.post.postLoading,\n  errors: state.errors\n});\n\nUpdatePostPage.propTypes = {\n  currentPost: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n  errors: PropTypes.object.isRequired,\n  getPostByID: PropTypes.func.isRequired,\n  updatePost: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  getPostByID,\n  updatePost\n})(UpdatePostPage);","map":{"version":3,"sources":["/home/raja/Documents/PM2/mern_blog/bloggy-master/client/src/containers/posts/UpdatePostPage.js"],"names":["React","useState","useEffect","PropTypes","PostForm","Validate","connect","getPostByID","updatePost","UpdatePostPage","errors","loading","currentPost","match","history","title","body","post","setPost","params","id","handleChange","e","target","name","value","handleBlur","error","handleSubmit","preventDefault","_id","isPostLoaded","Object","keys","length","mapStateToProps","state","postLoading","propTypes","object","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PostForm from \"../../components/posts/PostForm\";\nimport Validate from \"../../components/form/Validate\";\nimport { connect } from \"react-redux\";\nimport { getPostByID, updatePost } from \"../../actions/postActions\";\n\nconst UpdatePostPage = ({\n   errors,\n   updatePost,\n   loading,\n   currentPost,\n   getPostByID,\n   match,\n   history\n}) => {\n   const [post, setPost] = useState({\n      title: \"\",\n      body: \"\",\n      errors: {}\n   });\n\n   useEffect(() => {\n      getPostByID(match.params.id);\n   }, [match, getPostByID]);\n\n   // updating the local state of post with the received post data\n   useEffect(() => {\n      setPost(post => ({\n         title: currentPost.title,\n         body: currentPost.body,\n         errors: { ...post.errors }\n      }));\n   }, [currentPost]);\n\n   useEffect(() => {\n      setPost(post => {\n         return { ...post, errors };\n      });\n   }, [errors]);\n\n   const handleChange = e => {\n      setPost({\n         ...post,\n         [e.target.name]: e.target.value\n      });\n   };\n\n   const handleBlur = e => {\n      const { name, value } = e.target;\n      const error = { ...post.errors, ...Validate(name, value).errors };\n      setPost({ ...post, errors: { ...error } });\n   };\n\n   const handleSubmit = e => {\n      e.preventDefault();\n      const { title, body } = post;\n      updatePost(currentPost._id, { title, body }, history);\n   };\n\n   // to ensure that the post is loaded otherwise we would make uncontrolled form access error\n   const isPostLoaded = () => {\n      return post.title || post.body || Object.keys(post.errors).length > 0;\n   };\n\n   return isPostLoaded() ? (\n      <PostForm\n         loading={loading}\n         post={post}\n         onChange={handleChange}\n         onBlur={handleBlur}\n         onSubmit={handleSubmit}\n      />\n   ) : (\n      <div />\n   );\n};\n\nconst mapStateToProps = state => ({\n   currentPost: state.post.post,\n   loading: state.post.postLoading,\n   errors: state.errors\n});\n\nUpdatePostPage.propTypes = {\n   currentPost: PropTypes.object.isRequired,\n   loading: PropTypes.bool.isRequired,\n   errors: PropTypes.object.isRequired,\n   getPostByID: PropTypes.func.isRequired,\n   updatePost: PropTypes.func.isRequired\n};\n\nexport default connect(\n   mapStateToProps,\n   { getPostByID, updatePost }\n)(UpdatePostPage);\n"]},"metadata":{},"sourceType":"module"}